/**
  Asks a OAuth2 provider for a user's account information. 3 legged
  authorization mechanism is used by default.
  @method buildUserData
  @param  {String} provider A string representing the provider
  @return {Object} Different providers return different data. An example
  response is given for each provider.
  Google:
    user: {
        id: '105503159085383028265',
        name: 'Zephyr Pellerin',
        given_name: 'Zephyr',
        family_name: 'Pellerin',
        link: 'https://plus.google.com/105503159085383028265',
        picture: 'https://lh6.googleusercontent.com/AK18/.../photo.jpg',
        gender: 'male',
        birthday: '1992-01-19',
        locale: 'en'
    }
**/

function buildUserData(provider) {
  // Make the URL request
  $.ajax({
    type: 'GET',
    url: 'https://www.googleapis.com/userinfo/v2/me',
    headers: {'Authorization': 'OAuth ' + provider.getAccessToken()}
  }).done(function(user) {
      // Begin authentication
      var userReq = { type: 'POST', url: Skiplist.remoteURL + '/users', data: user };
      $.ajax(userReq).done(function (data) {
        console.log("Build User Data");
        console.log(data);
        // If the user is new, pop a dialog asking for name, etc.
        // Otherwise just let the user know he's logged in.
      });
  });
}

/**
  authorizeProvider is a generic OAuth callback.
  @method authorizeProvider
  @return {*} The side effect generated by authorize is all that is expected.
**/

function authorizeProvider() {
  console.log("Called authorizeProvider");
  Skiplist.providers.forEach(function(providerName) {
    var provider = window[providerName];
    var button = document.querySelector('#' + providerName);

    if (!localStorage.getItem('linkShareAuth')) {
      var result = buildUserData(provider);
      localStorage.setItem('linkShareAuth', result);
    }

    if (provider.hasAccessToken()) {
      button.classList.add('authorized');
    } else {
      button.classList.remove('authorized');
    }
  });
}

/**
  Asks the client to request an access token from the OAuth2 authorizing party.
  @method authorize
  @param  {String} provider A string representing the provider
  @return {*} The side effect generated by authorize is all that is expected.
**/
function authorize(providerName) {
  // bail if we've gotten the wrong type
  if(typeof providerName != 'string') {
    throw("Provider must be a string");
  }
  var provider = window[providerName];
  // Different providers may require different setup mechanisms in addition to
  // the generic OAuth2 facilities.
  switch(providerName.toLowerCase()) {
    case "google":
      provider.authorize(authorizeProvider);
      break;
    default:
      throw("Unrecognized provider");
  }
}

function clearAuthorized() {
  Skiplist.providers.forEach(function(providerName) {
    var provider = window[providerName];
    provider.clearAccessToken();
  });
  checkAuthorized();
}

